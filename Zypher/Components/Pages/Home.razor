@page "/"
@using Zypher.Services
@using Newtonsoft.Json.Linq
@using Microsoft.JSInterop
@implements IDisposable
@inject IConfiguration Configuration
@inject HttpClient Http
@inject ModeService ModeService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>Zypher</PageTitle>

<div class="wrapper">
    <div class="container">
        <h1>Zypher</h1>
        <h5 class="info-text">Press Ctrl + Space for Translation</h5>

        <p class="sample-text">
            @for (int i = 0; i < sampleText.Length; i++)
            {
                var keyBase = $"pos-{i}"; // Create a base unique identifier for this position
        
                if (i == userInput.Length && !testCompleted && testStarted)
                {
                    <span class="cursor" @key="@(keyBase + "-cursor")"></span>
                }
        
                var typedChar = i < userInput.Length ? userInput[i] : (char?)null;
                var sampleChar = sampleText[i];
                var className = "";
        
                if (typedChar.HasValue)
                {
                    if (typedChar == sampleChar)
                    {
                        className = "correct";
                    }
                    else
                    {
                        className = "incorrect";
                    }
                }
        
                <span id="char-@i" class="@className" @key="@keyBase">@sampleChar</span>
            }
            @if (userInput.Length == sampleText.Length && !testCompleted && testStarted)
            {
                <span class="cursor" @key="@(sampleText.Length + "-cursor")"></span>
            }
        </p>

        <input
            value="@userInput"
            @oninput="CheckInput"
            @onkeydown="OnKeyDown"
            class="typing-input"
            placeholder="Start typing..."
            style="opacity: 0; position: absolute; top: 0; left: 0; width: 80%; height: 38px; cursor: text;"
            @onblur="FocusInput"
            @ref="inputElement"
        />

        <div class="stats">
            <p>WPM: <span class="wpm">@wpm</span></p>
            <p>Accuracy: <span class="accuracy">@accuracy.ToString("0.00")%</span></p>
        </div>
        <button class="btn btn-primary" @onclick="LoadNextText">Next</button>
    </div>
</div>

@if(showTranslation)
{
    <div class="floating-translation" style="position: absolute; top: @((int)Math.Round(floatingTop))px; left: @((int)Math.Round(floatingLeft))px;">
         @floatingTranslation
    </div>
}

<script>
    window.getElementPosition = (id) => {
        var el = document.getElementById(id);
        if (el) {
            var rect = el.getBoundingClientRect();
            return { top: rect.top + window.scrollY, left: rect.left + window.scrollX };
        }
        return null;
    }
</script>

@code {
    private string sampleText = "The quick brown fox jumps over the lazy dog.";
    private string userInput = "";
    private DateTime startTime;
    private bool testStarted = false;
    private int wpm = 0;
    private double accuracy = 100;
    private System.Timers.Timer timer;
    private bool testCompleted = false;
    private ElementReference inputElement;

    private int cumulativeCorrect = 0;
    private int cumulativeTotal = 0;

    private string floatingTranslation = "";
    private double floatingTop = 0;
    private double floatingLeft = 0;
    private bool showTranslation = false;

    protected override async Task OnInitializedAsync()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += UpdateWPM;
        timer.AutoReset = true;
        timer.Start();
        
        ModeService.OnModeChanged += OnModeChanged;
        await LoadNewSampleText();
    }

    private async void OnModeChanged()
    {
        await LoadNextText();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputElement.FocusAsync();
        }
    }

    private async void CheckInput(ChangeEventArgs e)
    {
        if (testCompleted) return;

        if (!testStarted)
        {
            startTime = DateTime.Now;
            testStarted = true;
        }

        userInput = e.Value?.ToString() ?? "";
        if (userInput.Length > sampleText.Length)
        {
            userInput = userInput.Substring(0, sampleText.Length);
        }

        if (userInput.Length == sampleText.Length)
        {
            testCompleted = true;
            timer?.Stop();
            UpdateWPM(null, null);
            NavigateToResultsPage(); // Add this line to navigate to the results page
        }

        if (showTranslation)
        {
            showTranslation = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnKeyDown(KeyboardEventArgs e)
    {
        if (testCompleted) return;

        if (e.Key == " " || e.Key == "Space") 
        {
            if (e.CtrlKey)
            {
                await ShowTranslation();
            }
            return;
        }

        if (e.Key == "Backspace" || e.Key == "Delete")
        {
            return;
        }

        int index = userInput.Length;
        if (index < sampleText.Length)
        {
            cumulativeTotal++;

            if (e.Key == sampleText[index].ToString())
            {
                cumulativeCorrect++;
            }

            accuracy = cumulativeTotal > 0 ? (cumulativeCorrect / (double)cumulativeTotal) * 100 : 100;
        }
    }

    private async Task ShowTranslation()
    {
        int pos = userInput.Length;
        if (pos >= sampleText.Length)
        {
            pos = sampleText.Length - 1;
        }

        int wordStart = pos;
        while (wordStart > 0 && sampleText[wordStart - 1] != ' ')
        {
            wordStart--;
        }

        int wordEnd = pos;
        while (wordEnd < sampleText.Length && sampleText[wordEnd] != ' ')
        {
            wordEnd++;
        }

        string currentWord = sampleText.Substring(wordStart, wordEnd - wordStart).Trim();
        if (string.IsNullOrEmpty(currentWord))
            return;

        await TranslateWord(currentWord);

        var position = await JS.InvokeAsync<Position>("getElementPosition", "char-" + wordStart);
        if (position != null)
        {
            floatingTop = position.top - 40;
            
            var wordWidth = (wordEnd - wordStart) * 10; 
            floatingLeft = position.left + (wordWidth / 2); 
        }

        showTranslation = true;
        StateHasChanged();
    }

    private void UpdateWPM(object? sender, System.Timers.ElapsedEventArgs? e)
    {
        if (testStarted && !testCompleted)
        {
            var elapsedMinutes = (DateTime.Now - startTime).TotalMinutes;
            wpm = elapsedMinutes > 0 ? (int)(userInput.Length / 5 / elapsedMinutes) : 0;
            InvokeAsync(StateHasChanged);
        }
    }

    private async void FocusInput()
    {
        await inputElement.FocusAsync();
    }

    private async Task LoadNextText()
    {
        await LoadNewSampleText();
        testStarted = false;
        testCompleted = false;
        userInput = "";
        accuracy = 100;
        wpm = 0;
        cumulativeCorrect = 0;
        cumulativeTotal = 0;
        showTranslation = false; 

        timer.Start();
        StateHasChanged();
    }

    private async Task LoadNewSampleText()
    {
        string apiUrl = string.Empty;

        if (ModeService.SelectedMode == TextType.Words)
        {
            apiUrl = Configuration["TextApis:RandomWords"];
            var text = await Http.GetStringAsync(apiUrl);
            sampleText = text.Replace("[", "").Replace("]", "").Replace(",", " ").Replace("\"", "").Replace("\n", " ").Replace("\r", " ").Replace("  ", " ");
        }
        else if (ModeService.SelectedMode == TextType.BookQuote)
        {
            apiUrl = Configuration["TextApis:RandomBookQuote"];
            var text = await Http.GetStringAsync(apiUrl);
            var quote = JObject.Parse(text)["quote"].ToString();
            sampleText = quote;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }

    public class Position
    {
        public double top { get; set; }
        public double left { get; set; }
    }

    private async Task TranslateWord(string word)
    {
        var requestBody = new { text = word, target_lang = "de" };
        var response = await Http.PostAsJsonAsync("http://localhost:8000/translate", requestBody);
    
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            floatingTranslation = result["translated_text"];
        }
    }

    private void NavigateToResultsPage()
    {
        NavigationManager.NavigateTo($"/results?wpm={wpm}&accuracy={accuracy}");
    }
}
