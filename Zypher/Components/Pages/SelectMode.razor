@page "/SelectMode"
@using Microsoft.AspNetCore.SignalR.Client
@using Zypher.Services
@inject IConfiguration Configuration
@inject HttpClient Http
@inject ModeService ModeService
@inject NavigationManager NavigationManager
 @inject UserService UserService

<PageTitle>Zypher</PageTitle>

<div class="wrapper">
    <div class="container">
        @if (!isMultiplayer)
        {
            <h1>Hello, @username!</h1>
            <h5 class="info info-text">Select your Game Mode.</h5>
            
            <div class="wrappButtons">
                <button class="btn button mode-select-btn" @onclick="SetSingleMode">Singleplayer</button>
                <button class="btn button mode-select-btn" @onclick="SetMultiplayerMode">Multiplayer</button>
            </div>
        }
        else
        {
            <h1>Multiplayer</h1>
            <div id="startContainer">
                <button class="btn multiplayer-btn second" @onclick="CreateSession" disabled="@isCreating">
                    @(isCreating ? "Creating..." : "Create New Session")
                </button>
            </div>
            <div style="width: 100%; display: flex; justify-content: center">
                <hr style="margin: 20px 0; color: white; width: 80%"/>
            </div>
            <h3 style="color: white; margin-top: 2vw">Enter existing Session</h3>
            <div class="input-container" style="display: flex; align-items: center; gap: 10px; width: fit-content; margin: auto;">
                <input type="text" class="form-control" placeholder="6-digit code" @bind="enteredCode" maxlength="6" />
                <button class="btn multiplayer-btn" @onclick="AcceptCode">Accept</button>
            </div>
        }
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="mt-3 text-danger">Error: @errorMessage</p>
}

@code {
    private bool isMultiplayer = false;
    private string enteredCode;
    private HubConnection? hubConnection;
    private string? errorMessage;
    private bool isCreating = false;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/typinghub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.Closed += HubConnection_Closed;

        try {
            await hubConnection.StartAsync();
        } catch (Exception ex) {
            errorMessage = $"Failed to connect: {ex.Message}";
        }

        username = await UserService.GetUsernameAsync();
    }

    private Task HubConnection_Closed(Exception? arg)
    {
        errorMessage = $"Connection closed: {arg?.Message ?? "Unknown reason"}";
        return InvokeAsync(StateHasChanged);
    }

    private void SetMultiplayerMode()
    {
        isMultiplayer = true;
    }

    private void SetSingleMode()
    {
        isMultiplayer = false;
        NavigationManager.NavigateTo("/");
    }
    
    private async Task CreateSession()
    {
        if (hubConnection?.State != HubConnectionState.Connected)
        {
            errorMessage = "Not connected to hub.";
            return;
        }
        isCreating = true;
        errorMessage = null;
        StateHasChanged();

        string? createdGameCode = null;
        try
        {
            createdGameCode = await hubConnection.InvokeAsync<string?>("CreateGame");
            if (!string.IsNullOrEmpty(createdGameCode))
            {
                NavigationManager.NavigateTo($"/multiplayer/{createdGameCode}");
            }
            else
            {
                errorMessage = "Hub failed to create game or return code.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error invoking CreateGame: {ex.Message}");
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            if (string.IsNullOrEmpty(createdGameCode))
            {
                isCreating = false;
                StateHasChanged();
            }
        }
    }

    private void AcceptCode()
    {
        NavigationManager.NavigateTo("/multiplayer/" + enteredCode);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            hubConnection.Closed -= HubConnection_Closed;
            await hubConnection.DisposeAsync();
        }
    }
}
