@page "/debugcreate"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<h3>Debug Game Creator</h3>

@inject NavigationManager Navigation

@if (hubConnection == null)
{
    <p>Initializing...</p>
}
else if (hubConnection.State != HubConnectionState.Connected)
{
    <p>Connecting to hub (@hubConnection.State)...</p>
    @if (!string.IsNullOrEmpty(errorMessage)) {
         <p class="text-danger">Connection Error: @errorMessage</p>
    }
}
else
{
    <button @onclick="CreateGameAndNavigate" disabled="@isCreating">
        @(isCreating ? "Creating..." : "Create Game & Navigate")
    </button>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="mt-3 text-danger">Error: @errorMessage</p>
}


@code {
    private HubConnection? hubConnection;
    private string? errorMessage;
    private bool isCreating = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/typinghub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.Closed += HubConnection_Closed;

        try {
            await hubConnection.StartAsync();
        } catch (Exception ex) {
            errorMessage = $"Failed initial connect: {ex.Message}";
        }
    }

    private Task HubConnection_Closed(Exception? arg)
    {
        errorMessage = $"Connection closed: {arg?.Message ?? "Unknown reason"}";
        return InvokeAsync(StateHasChanged);
    }

    private async Task CreateGameAndNavigate()
    {
        if (hubConnection?.State != HubConnectionState.Connected)
        {
            errorMessage = "Not connected to hub.";
            return;
        }
        isCreating = true;
        errorMessage = null;
        StateHasChanged();

        string? createdGameCode = null;
        try
        {
            createdGameCode = await hubConnection.InvokeAsync<string?>("CreateGame");

            if (!string.IsNullOrEmpty(createdGameCode)) {
                Navigation.NavigateTo($"/multiplayer/{createdGameCode}");
                 // Navigation happens, this component will dispose, connection will close.
                 // The game session exists server-side in a pending state.
            } else {
                errorMessage = "Hub failed to create game or return code.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error invoking CreateGame: {ex.Message}");
            errorMessage = $"Error: {ex.Message}";
        }
        finally {
             // Only set isCreating false if navigation *didn't* happen
             if (string.IsNullOrEmpty(createdGameCode))
             {
                isCreating = false;
                StateHasChanged(); // Show error if needed
             }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            hubConnection.Closed -= HubConnection_Closed;
            await hubConnection.DisposeAsync();
        }
    }
}